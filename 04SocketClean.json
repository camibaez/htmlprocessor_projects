{"nodes":[{"pattern":"*.jsp","class":"FilePattern","id":"jspExtFilter","type":"Condition"},{"pattern":"*.java","class":"FilePattern","id":"javaExtFilter","type":"Condition"},{"pattern":"\\s?mc\\s*=\\s*new\\s*MessageContext\\((\\s|.)*?\\);","replace":"mc = new MessageContext(getMessageHandler(\"<cleaner#pname>\"));","flags":0,"class":"ReplaceText","id":"cleanMC","type":"Action"},{"code":"var pattern = \/([A-Z][A-Z0-9]{6})(.*Message)\/;\nvar found = target.match(pattern);\n\nif( found.length > 0 ){\n    var pName = found[1];\n    target = target.replace(\"<cleaner#pname>\", pName);\n}\n\nreturn target;","class":"ExecutableAction","id":"progrExtractor","type":"Action"},{"code":"    function extractVarName(target) {\n        var pattern = \/Socket\\s+([a-zA-Z_$][a-zA-Z_$0-9]*)\\s*\/;\n        var found = pattern.exec(target);\n        if (found) {\n            return [found[1], found.index];\n        }\n        return null;\n    }\n\n    function determineScope(target, varIndex) {\n        var level = 0;\n        var i = varIndex;\n        for (; i < target.length; i++) {\n            if (target[i] == \"{\")\n                level += 1;\n            if (target[i] == \"}\") {\n                if (level == 0)\n                    break;\n                level -= 1\n            }\n        }\n        return i;\n    }\n\n    var extractResult = extractVarName(target);\n    if (extractResult == null)\n        return target;\n\n    var varName = extractResult[0];\n    var varIndex = extractResult[1];\n    var endScopeIndex = determineScope(target, varIndex);\n\n    var stringPreSpace = target.substring(0, varIndex);\n    var stringSpace = target.substring(varIndex, endScopeIndex);\n    var stringPostSpace = target.substring(endScopeIndex);\n    var regsLists = [\n        [new RegExp(\"(Socket\\\\s+\" + varName + \"\\\\s*=\\\\s*null\\\\s*)\", 'g'), \"\/\/#ssl_mig#$1\"],\n        [new RegExp(\"(\" + varName + \"\\\\s*=\\\\s*new\\\\s*Socket\\\\()\", 'g'), \"\/\/#ssl_mig#$1\"],\n        [new RegExp(\"([^a-zA-Z0-9_]\" + varName + \"\\\\..*?;)\", 'g'), \"\/\/#ssl_mig#$1\"]\n    ]\n\n    for (var i = 0; i < regsLists.length; i++) {\n        var pattern = regsLists[i][0];\n        var replace = regsLists[i][1];\n        stringSpace = stringSpace.replace(pattern, replace);\n    }\n\n    return target = stringPreSpace + stringSpace + stringPostSpace;\n","class":"ExecutableAction","id":"remSocketRef","type":"Action"},{"code":"var pattern = \/extends.*SuperServlet\/;\nreturn pattern.test(target);","class":"ExecutableCondition","id":"serveltExecCond","type":"Condition"}],"lastWorkingDirectory":null,"name":null,"description":null,"graph":"strict digraph G {\r\n  START_NODE [ label=\"START_NODE\" ];\r\n  END_NODE [ label=\"END_NODE\" ];\r\n  FAIL_NODE [ label=\"FAIL_NODE\" ];\r\n  jspExtFilter [ label=\"jspExtFilter\" ];\r\n  javaExtFilter [ label=\"javaExtFilter\" ];\r\n  cleanMC [ label=\"cleanMC\" ];\r\n  progrExtractor [ label=\"progrExtractor\" ];\r\n  remSocketRef [ label=\"remSocketRef\" ];\r\n  serveltExecCond [ label=\"serveltExecCond\" ];\r\n  START_NODE -> jspExtFilter [ label=\"et822680759\" ];\r\n  jspExtFilter -> FAIL_NODE [ label=\"et483022\" ];\r\n  jspExtFilter -> javaExtFilter [ label=\"ef2039617245\" ];\r\n  javaExtFilter -> serveltExecCond [ label=\"et443739489\" ];\r\n  javaExtFilter -> FAIL_NODE [ label=\"ef911006721\" ];\r\n  progrExtractor -> remSocketRef [ label=\"et1699405467\" ];\r\n  cleanMC -> progrExtractor [ label=\"et1914073312\" ];\r\n  serveltExecCond -> cleanMC [ label=\"et934009896\" ];\r\n  serveltExecCond -> FAIL_NODE [ label=\"ef223158483\" ];\r\n  remSocketRef -> END_NODE [ label=\"et382959200\" ];\r\n}\r\n"}