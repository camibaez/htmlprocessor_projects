{"nodes":[{"pattern":"*.jsp","class":"FilePattern","id":"jspExtFilter","type":"Condition","active":true},{"pattern":"*.java","class":"FilePattern","id":"javaExtFilter","type":"Condition","active":true},{"pattern":"\\s?(mc[a-zA-Z0-9]*)\\s*=\\s*new\\s*MessageContext\\((\\s|.)*?\\);","replace":" $1 = new MessageContext(getMessageHandler(\"<cleaner#pname>\"));","flags":0,"class":"ReplaceText","id":"cleanMC","type":"Action","active":true},{"code":"    var progPattern = \/public\\s+class\\s+JS([A-Za-z0-9]{7})\/;\n    var found = target.match(progPattern);\n    if (Array.isArray(found) && found.length > 1) {\n        var pName = found[1];\n        var pHolder = \/<cleaner#pname>\/g;\n        target = target.replace(pHolder, pName);\n\n\tif(data.get('programName') == null){\n\t\tdata.put('programName', '');\n\t}\n\tdata.put('programName', pName);\n    }\n    \n    return target;\n\n","class":"ExecutableAction","id":"progrExtractor","type":"Action","active":true},{"code":"    function extractVarName(target) {\n        var pattern = \/\\sSocket\\s+([a-zA-Z_$][a-zA-Z_$0-9]*)\\s*(=|;)\/;\n        var found = pattern.exec(target);\n        if (Array.isArray(found) && found.length > 1) {\n            return [found[1], found.index];\n        }\n        return null;\n    }\n   \n    var extractResult = extractVarName(target);\n    if (extractResult == null) {\n        print(\"\\n ==> Error 1\");\n        return target;\n    }\n\n    var varName = extractResult[0];\n    var varIndex = extractResult[1];\n    \n    var JavaParser = Java.type('processor.core.graph.jslinker.JavaParser');\n    var scope = JavaParser.getMethodScopeOf(target, varIndex);\n    if (!scope.length) {\n        var pattern  = new RegExp(varName + \"\\\\s*=\\\\s*new\\\\s*Socket\\\\(\");\n        var found = pattern.exec(target);\n        if (found != null) {\n            varIndex = found.index;\n            scope = JavaParser.getMethodScopeOf(target, varIndex);\n        }else{\n            return target;\n        } \n    }\n    varIndex = scope[0];\n    var endScopeIndex = scope[1];\n    print(\"\\n\" + varIndex + \",\" + endScopeIndex);\n    var stringPreSpace = target.substring(0, varIndex);\n    var stringSpace = target.substring(varIndex, endScopeIndex);\n    var stringPostSpace = target.substring(endScopeIndex);\n    var regsLists = [\n        [new RegExp(\"Socket\\\\s+\" + varName + \"\\\\s*=\\\\s*null\\\\s*;\", 'g'), \"\"],\n        [new RegExp(\"(Socket)?.*\" + varName + \"\\\\s*=\\\\s*new\\\\s*Socket\\\\(.*?;\", 'g'), \"\"],\n        [new RegExp(\"([^a-zA-Z0-9_])\" + varName + \"\\\\..*?;\", 'g'), \"$1\"],\n   \t[new RegExp(\"if\\\\s*\\\\(\\\\s*\" + varName + \"\\\\s*(!|=)=\\\\s*null\\\\s*\\\\)\", 'g'), \"\"]\n    ]\n     print(\"\\nReg: \" + \"if\\s*\\(\\s*\" + varName + \"\\s*(!|=)=\\s*null\\s*\\)\");\n\n    for (var i = 0; i < regsLists.length; i++) {\n        var pattern = regsLists[i][0];\n        var replace = regsLists[i][1];\n        stringSpace = stringSpace.replace(pattern, replace);\n    }\n\n    return target = stringPreSpace + stringSpace + stringPostSpace;\n\n","class":"ExecutableAction","id":"remSocketRef","type":"Action","active":true},{"code":"var pattern = \/extends .*(JSEIBS|Super)Servlet\/;\nvar res = pattern.test(target);\npattern = \/class\\s+BaseServlet\/;\nres = res && !pattern.test(target);\nreturn res;","class":"ExecutableCondition","id":"serveltExecCond","type":"Condition","active":true},{"pattern":"Socket\\s+s\\s*=\\snull;","replace":" ","flags":0,"class":"ReplaceText","id":"jspChanger1","type":"Action","active":true},{"pattern":"MessageContext\\s+mc\\s*=\\s*null;","replace":"MessageProcessor mc = null;","flags":0,"class":"ReplaceText","id":"jspChanger2","type":"Action","active":true},{"pattern":"s\\s*=\\s*new\\s+Socket\\((.|\\s)*?\\);","replace":" ","flags":0,"class":"ReplaceText","id":"jspCleaner3","type":"Action","active":true},{"pattern":"\\s?(mc[a-zA-Z0-9]*)\\s*=\\s*new\\s*MessageContext\\((\\s|.)*?\\);","replace":" mc = new MessageProcessor(\"<cleaner#pname>\");","flags":0,"class":"ReplaceText","id":"jspCleanerMc","type":"Action","active":true},{"code":"\tprint(\"\\nhere\");    \n    var progPattern = \/getMessageRecord\\(\"([A-Za-z0-9]{7})[A-Za-z0-9]*\"\\)\/;\n    var found = target.match(progPattern);\n\t\n    if (found != null && found.length > 1) {\n        var pName = found[1];\n        var pHolder = \/<cleaner#pname>\/g;\n        target = target.replace(pHolder, pName);\n    }\n    \n    return target;","class":"ExecutableAction","id":"jspProgExtractor","type":"Action","active":true},{"pattern":"mc\\.receiveMessage\\(\\);","replace":"mc.receiveMessageRecord();","flags":0,"class":"ReplaceText","id":"jspCleaner6","type":"Action","active":true},{"pattern":"s\\.close\\(\\);","replace":" ","flags":0,"class":"ReplaceText","id":"jspCLenaer7","type":"Action","active":true},{"code":"\nvar reg = \/getMessageHandler\\(\"[A-Za-z0-9]+\"\\)\/;\nvar found = reg.exec(target);\nif (found != null) {\n\n    varIndex = found.index;\n    var JavaParser = Java.type('processor.core.graph.jslinker.JavaParser');\n    var scope = JavaParser.getMethodScopeOf(target, varIndex);\n\n    if(scope.length){\n\tprint(\"here\");\n        var stringPreSpace = target.substring(0, scope[0]);\n        var stringSpace = target.substring(scope[0], scope[1]);\n        var stringPostSpace = target.substring(scope[1]);\n       \n        stringSpace = stringSpace.replace(\/catch\\s+\\(IOException\/g, \"catch (Exception\");\n        target =  (stringPreSpace + stringSpace + stringPostSpace);\n\t\n    }\n}\n\nreturn target;\n","class":"ExecutableAction","id":"cleanException","type":"Action","active":true},{"code":"var pattern = \/new\\s+Socket\\s*\\(.*getInitSocket\\(.*\\)\\s*\\+\\s*([1-9][0-9]?)\\)\/;\nvar found = target.match(pattern);\nif (Array.isArray(found) && found.length > 1) {\n\tvar port = found[1];\n        if(parseInt(port) > 1){\n\t\tif(data.get('sockets') == null){\n\t\tdata.put('sockets', []);\n\t\t}\n\t\n\t\tvar socketData = data.get(\"programName\") + \":\" + port;\n\t\tvar sockets = data.get('sockets');\n\t\tsockets.push(socketData);\n\t\tdata.put('sockets', sockets);\n\t}\n }\n\n\nreturn target;","class":"ExecutableAction","id":"socketPortExtractor","type":"Action","active":true}],"lastWorkingDirectory":null,"name":null,"description":null,"graph":"strict digraph G {\r\n  START_NODE [ label=\"START_NODE\" ];\r\n  END_NODE [ label=\"END_NODE\" ];\r\n  FAIL_NODE [ label=\"FAIL_NODE\" ];\r\n  jspExtFilter [ label=\"jspExtFilter\" ];\r\n  javaExtFilter [ label=\"javaExtFilter\" ];\r\n  cleanMC [ label=\"cleanMC\" ];\r\n  progrExtractor [ label=\"progrExtractor\" ];\r\n  remSocketRef [ label=\"remSocketRef\" ];\r\n  serveltExecCond [ label=\"serveltExecCond\" ];\r\n  jspChanger1 [ label=\"jspChanger1\" ];\r\n  jspChanger2 [ label=\"jspChanger2\" ];\r\n  jspCleaner3 [ label=\"jspCleaner3\" ];\r\n  jspCleanerMc [ label=\"jspCleanerMc\" ];\r\n  jspProgExtractor [ label=\"jspProgExtractor\" ];\r\n  jspCleaner6 [ label=\"jspCleaner6\" ];\r\n  jspCLenaer7 [ label=\"jspCLenaer7\" ];\r\n  cleanException [ label=\"cleanException\" ];\r\n  socketPortExtractor [ label=\"socketPortExtractor\" ];\r\n  START_NODE -> jspExtFilter [ label=\"et600550318\" ];\r\n  jspChanger2 -> jspCleaner3 [ label=\"et1373699188\" ];\r\n  jspExtFilter -> jspChanger1 [ label=\"et1963291645\" ];\r\n  jspExtFilter -> javaExtFilter [ label=\"ef1621079145\" ];\r\n  jspCleaner3 -> jspCleanerMc [ label=\"et529803726\" ];\r\n  jspCleanerMc -> jspProgExtractor [ label=\"et2114272521\" ];\r\n  jspProgExtractor -> jspCleaner6 [ label=\"et767068135\" ];\r\n  jspCleaner6 -> jspCLenaer7 [ label=\"et15269596\" ];\r\n  javaExtFilter -> serveltExecCond [ label=\"et1049390422\" ];\r\n  javaExtFilter -> FAIL_NODE [ label=\"ef1773597435\" ];\r\n  jspCLenaer7 -> END_NODE [ label=\"et448459815\" ];\r\n  cleanException -> END_NODE [ label=\"et1153821857\" ];\r\n  jspChanger1 -> jspChanger2 [ label=\"et257073734\" ];\r\n  serveltExecCond -> cleanMC [ label=\"et855427547\" ];\r\n  serveltExecCond -> FAIL_NODE [ label=\"ef1984580408\" ];\r\n  cleanMC -> progrExtractor [ label=\"et2045658118\" ];\r\n  remSocketRef -> cleanException [ label=\"et1270759547\" ];\r\n  progrExtractor -> socketPortExtractor [ label=\"et78727298\" ];\r\n  socketPortExtractor -> remSocketRef [ label=\"et1831704786\" ];\r\n}\r\n"}